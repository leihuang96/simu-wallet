name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VERSION: ${GITHUB_SHA::7}
  ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn test

      - name: SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push wallet-service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: wallet-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wallet-service:latest
            ${{ secrets.DOCKER_USERNAME }}/wallet-service:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/wallet-service:${{ env.ENV }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/wallet-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/wallet-service:buildcache,mode=max

      # 其他服务的构建步骤类似...

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/deployment
            docker-compose pull
            docker-compose up -d

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}